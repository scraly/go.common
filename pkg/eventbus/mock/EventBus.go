// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EventBus is an autogenerated mock type for the EventBus type
type EventBus struct {
	mock.Mock
}

// HasCallback provides a mock function with given fields: topic
func (_m *EventBus) HasCallback(topic string) bool {
	ret := _m.Called(topic)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Publish provides a mock function with given fields: topic, args
func (_m *EventBus) Publish(topic string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Subscribe provides a mock function with given fields: topic, fn
func (_m *EventBus) Subscribe(topic string, fn interface{}) error {
	ret := _m.Called(topic, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeAsync provides a mock function with given fields: topic, fn, transactional
func (_m *EventBus) SubscribeAsync(topic string, fn interface{}, transactional bool) error {
	ret := _m.Called(topic, fn, transactional)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, bool) error); ok {
		r0 = rf(topic, fn, transactional)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeOnce provides a mock function with given fields: topic, fn
func (_m *EventBus) SubscribeOnce(topic string, fn interface{}) error {
	ret := _m.Called(topic, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeOnceAsync provides a mock function with given fields: topic, fn
func (_m *EventBus) SubscribeOnceAsync(topic string, fn interface{}) error {
	ret := _m.Called(topic, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: topic, handler
func (_m *EventBus) Unsubscribe(topic string, handler interface{}) error {
	ret := _m.Called(topic, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitAsync provides a mock function with given fields:
func (_m *EventBus) WaitAsync() {
	_m.Called()
}
