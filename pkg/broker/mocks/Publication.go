// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import broker "github.com/scraly/go.common/pkg/broker"
import mock "github.com/stretchr/testify/mock"

// Publication is an autogenerated mock type for the Publication type
type Publication struct {
	mock.Mock
}

// Ack provides a mock function with given fields:
func (_m *Publication) Ack() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Message provides a mock function with given fields:
func (_m *Publication) Message() *broker.Message {
	ret := _m.Called()

	var r0 *broker.Message
	if rf, ok := ret.Get(0).(func() *broker.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broker.Message)
		}
	}

	return r0
}

// Seq provides a mock function with given fields:
func (_m *Publication) Seq() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Timestamp provides a mock function with given fields:
func (_m *Publication) Timestamp() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Topic provides a mock function with given fields:
func (_m *Publication) Topic() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
